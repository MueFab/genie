trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - '*'
stages:
- stage: 'Building'
  jobs:
  - job: 'Debug'
    strategy:
      matrix:
        ubuntu2204:
          imageName: 'ubuntu-22.04'
          artifactName: 'ubuntu2204'
          binDir: 'bin'
    pool:
      vmImage: $(imageName)
    steps:
    - bash: |
        export PATH="$HOME/.local/bin:$PATH"
        pip3 install --upgrade pip
        sudo pip3 install cpplint
        sudo apt-get update
        sudo apt-get install cppcheck
        sudo apt-get install doxygen
        sudo apt-get install liblzma-dev
        sudo apt-get install libzstd-dev
      displayName: 'Install prerequisites (Ubuntu 22.04)'
      condition: eq( variables['artifactName'], 'ubuntu2204')

    - bash: brew install libomp
      displayName: 'Openmp installation (OSX)'
      condition: eq( variables['Agent.OS'], 'Darwin' )

    - bash: |
        git clone https://github.com/samtools/htslib.git
        cd htslib
        git checkout tags/1.12
        git submodule update --init --recursive
        autoreconf -i
        ./configure
        make -j
        sudo make install
      displayName: 'Install HTSLib (Unix)'
      condition: ne( variables['Agent.OS'], 'Windows_NT' )

    - bash: |
        git clone https://github.com/IlyaGrebnov/libbsc.git 
        cd libbsc 
        git checkout tags/v3.3.4
        sed -i 's/clang++/g++/g' makefile 
        make -j 
        sudo make install
      displayName: 'Install LibBSC (Unix)'
      condition: ne( variables['Agent.OS'], 'Windows_NT' )

    - bash: ./ci/src_test.sh
      displayName: 'Check source code (Ubuntu 22.04)'
      condition: eq( variables['artifactName'], 'ubuntu2204')

    - bash: ./ci/build.sh doc
      displayName: 'Build documentation (Ubuntu 22.04)'
      condition: eq( variables['artifactName'], 'ubuntu2204')

    - bash: ./ci/build.sh debug
      displayName: 'Genie build'

    - task: VSBuild@1
      inputs:
        solution: 'cmake-build-debug\genie.sln'
        msbuildArgs: '-m' 
      displayName: 'Genie build (MSVC)'
      condition: eq( variables['Agent.OS'], 'Windows_NT' )

    - publish: cmake-build-debug/$(binDir)
      artifact: 'genie-debug-$(artifactName)-$(Build.SourceVersion)'
      displayName: 'Publish binaries'

    - publish: cmake-build-debug/documentation/html
      artifact: 'genie-documentation-$(Build.SourceVersion)'
      displayName: 'Publish documentation (ubuntu2204)'
      condition: eq( variables['artifactName'], 'ubuntu2204')

  - job: 'Release'
    strategy:
      matrix:
        ubuntu2204:
          imageName: 'ubuntu-22.04'
          artifactName: 'ubuntu2204'
          architecture: ''
          binDir: 'bin'
    pool:
      vmImage: $(imageName)
    steps:
    - bash: brew install libomp
      displayName: 'Openmp installation (OSX)'
      condition: eq( variables['Agent.OS'], 'Darwin' )

    - bash: |
        git clone https://github.com/samtools/htslib.git
        cd htslib
        git checkout tags/1.12
        git submodule update --init --recursive
        autoreconf -i
        ./configure
        make -j
        sudo make install
      displayName: 'Install HTSLib (Unix)'
      condition: ne( variables['Agent.OS'], 'Windows_NT' )

    - bash: |
        git clone https://github.com/IlyaGrebnov/libbsc.git 
        cd libbsc 
        git checkout tags/v3.3.4
        sed -i 's/clang++/g++/g' makefile 
        make -j 
        sudo make install
      displayName: 'Install LibBSC (Unix)'
      condition: ne( variables['Agent.OS'], 'Windows_NT' )

    - bash: ./ci/build.sh release
      displayName: 'Genie build'

    - task: VSBuild@1
      inputs:
        solution: 'cmake-build-release\genie.sln'
        msbuildArgs: '-m' 
        configuration: 'Release'
      displayName: 'Genie build (MSVC)'
      condition: eq( variables['Agent.OS'], 'Windows_NT' )
    - publish: cmake-build-release/$(binDir)
      artifact: 'genie-release-$(artifactName)-$(Build.SourceVersion)'
      displayName: 'Publish binaries'

- stage: 'Testing'
  jobs:
  - job: 'Unit'
    strategy:
      matrix:
        ubuntu2204:
          imageName: 'ubuntu-22.04'
          artifactName: 'ubuntu2204'
          fileExt: ''
    pool:
      vmImage: $(imageName)
    steps:
    - bash: brew install libomp
      displayName: 'Openmp installation (OSX)'
      condition: eq( variables['Agent.OS'], 'Darwin' )

    - bash: |
        git clone https://github.com/samtools/htslib.git
        cd htslib
        git checkout tags/1.12
        git submodule update --init --recursive
        autoreconf -i
        ./configure
        make -j
        sudo make install
      displayName: 'Install HTSLib (Unix)'
      condition: ne( variables['Agent.OS'], 'Windows_NT' )

    - download: current
      artifact: 'genie-debug-$(artifactName)-$(Build.SourceVersion)'
      displayName: 'Download binaries'

    - bash: |
        mkdir cmake-build-debug
        mv ../genie-debug-$(artifactName)-$(Build.SourceVersion) cmake-build-debug/bin
        chmod +x cmake-build-debug/bin/*
      displayName: 'Copy binaries'

    - bash: ci/unit_test.sh
      displayName: 'Genie run unit tests'

    - task: PublishTestResults@2
      displayName: Publish utils test Results
      inputs:
        testResultsFiles: 'cmake-build-debug/bin/utils_test.xml'
        testRunTitle: 'utils-$(artifactName)-$(Build.SourceVersion)'
  
    - task: PublishTestResults@2
      displayName: Publish coding test Results
      inputs:
        testResultsFiles: 'cmake-build-debug/bin/coding_test.xml'
        testRunTitle: 'coding-$(artifactName)-$(Build.SourceVersion)'

    - task: PublishTestResults@2
      displayName: Publish gabac test Results
      inputs:
        testResultsFiles: 'cmake-build-debug/bin/gabac_test.xml'
        testRunTitle: 'gabac-$(artifactName)-$(Build.SourceVersion)'

  - job: 'Conformance_Roundtrip'
    strategy:
      matrix:
        ubuntu2204:
          imageName: 'ubuntu-22.04'
          artifactName: 'ubuntu2204'
          fileExt: ''
    pool:
      vmImage: $(imageName)
    steps:
    - bash: | 
        brew install libomp
        brew install gnu-time
      displayName: 'Openmp installation (OSX)'
      condition: eq( variables['Agent.OS'], 'Darwin' )

    - bash: |
        git clone https://github.com/samtools/htslib.git
        cd htslib
        git checkout tags/1.12
        git submodule update --init --recursive
        autoreconf -i
        ./configure
        make -j
        sudo make install
      displayName: 'Install HTSLib (Unix)'
      condition: ne( variables['Agent.OS'], 'Windows_NT' )

    - bash: |
        mkdir ref-decoder
        cd ref-decoder
        git config --global init.defaultBranch master
        git config --global pull.ff only
        git init
        git config user.email "mitogen-group@gmail.com"
        git config user.name "Azure test script"
        git pull https://${USERNAME}:${PASSWORD}@git.mpeg.expert/MPEG/Genomic_Information_Representation/mpegg-reference-sw.git Fix_LA
      displayName: 'Reference decoder checkout'
      env:
        USERNAME: $(EPFL_SCI-STI-MM_GITLAB_USERNAME)
        PASSWORD: $(EPFL_SCI-STI-MM_GITLAB_PASSWORD)
    - bash: |
        cd ref-decoder
        cmake .
      displayName: 'Reference decoder cmake'
    - bash: |
        cd ref-decoder
        make --jobs 
      displayName: 'Reference decoder build (make)'
      condition: ne( variables['Agent.OS'], 'Windows_NT' )

    - download: current
      artifact: 'genie-release-$(artifactName)-$(Build.SourceVersion)'
      displayName: 'Download binaries'

    - bash: |
        mkdir cmake-build-release
        mv ../genie-release-$(artifactName)-$(Build.SourceVersion) cmake-build-release/bin
        chmod +x cmake-build-release/bin/*
      displayName: 'Copy binaries'

    - bash: MPEGG_REF_DECODER=$PWD/ref-decoder/bin/decoder/mpegg-decoder-p2 ci/conformance_test.sh
      displayName: 'Genie run conformance tests'

- stage: 'Deployment'
  jobs:
  - job: 'Docker'
    strategy:
      matrix:
        ubuntu2204:
          imageName: 'ubuntu-22.04'
          artifactName: 'ubuntu2204'
          fileExt: ''
    pool:
      vmImage: $(imageName)
    steps:
    - task: Docker@2
      condition: and(eq(variables['Build.SourceBranchName'], 'develop'), ne(variables['Build.SourceBranchName'], 'merge'))
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'muefab/genie'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          develop
    
    # Build and push for the master branch
    - task: Docker@2
      condition: and(eq(variables['Build.SourceBranchName'], 'main'), ne(variables['Build.SourceBranchName'], 'merge'))
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'muefab/genie'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          latest
    
    # Build and push for Git tags
    - task: Docker@2
      condition: and(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), ne(variables['Build.SourceBranchName'], 'merge'))
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'muefab/genie'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.SourceBranchName)
