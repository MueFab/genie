/**
 * Copyright 2018-2024 The Genie Authors.
 * @file
 * @copyright This file is part of Genie
 * See LICENSE and/or visit https://github.com/MueFab/genie for more details.
 * @brief Declaration of the RecordPileup class for handling quality value
 * pileups.
 *
 * This file defines the `RecordPileup` class, which is used to manage genomic
 * records for encoding and decoding purposes. It provides functionality to
 * accumulate, access, and manipulate pileups of quality values and sequences
 * based on their mapping positions. The class offers efficient methods for
 * querying records and pre-processing sequences to ensure accurate
 * representation of the data during encoding operations.
 *
 * @details The `RecordPileup` class maintains a collection of genomic records
 * and allows for retrieval of pileups (aligned sequences) based on a specified
 * genomic position. It provides methods to add records, check if records fall
 * before a certain position, and extract sequences for encoding. The class
 * is essential in handling multiple records and organizing them for downstream
 * quality value quantization and encoding.
 */

#ifndef SRC_GENIE_QUALITY_CALQ_RECORD_PILEUP_H_
#define SRC_GENIE_QUALITY_CALQ_RECORD_PILEUP_H_

// -----------------------------------------------------------------------------

#include <string>
#include <utility>
#include <vector>

#include "genie/core/record/record.h"
#include "genie/quality/calq/calq_coder.h"

// -----------------------------------------------------------------------------

namespace genie::quality::calq {

/**
 * @brief Manages and stores genomic records for pileup generation.
 *
 * The `RecordPileup` class handles multiple genomic records, allowing the user
 * to accumulate, retrieve, and query quality value and sequence pileups based
 * on a specified genomic position. It provides functionality to filter and
 * process records to generate compact pileups for further encoding.
 *
 * @details The class supports various operations to maintain the integrity and
 * efficiency of the records it holds. It keeps track of minimum and maximum
 * positions of all records, allowing for quick lookups and optimized
 * processing. The pileups generated by the class are essential in ensuring
 * accurate and consistent encoding of genomic data.
 */
class RecordPileup {
  std::vector<EncodingRecord> records_;  //!< @brief List of genomic records.
  std::vector<std::vector<std::string>>
      preprocessed_qvalues_;  //!< @brief Pre-processed quality values for each
                              //!< record.
  std::vector<std::vector<std::string>>
      preprocessed_sequences_;  //!< @brief Pre-processed sequences for each
                                //!< record.
  uint64_t
      min_pos_;  //!< @brief Minimum genomic position of records in the pileup.
  uint64_t
      max_pos_;  //!< @brief Maximum genomic position of records in the pileup.

 public:
  /**
   * @brief Default constructor for the `RecordPileup` class.
   *
   * Initializes an empty `RecordPileup` object with no records.
   * The minimum and maximum positions are set to
   * `std::numeric_limits<uint64_t>::max()` and
   * `std::numeric_limits<uint64_t>::min()` respectively.
   */
  RecordPileup();

  /**
   * @brief Retrieves the pileup for a given genomic position.
   *
   * This method returns the pileup of sequences and quality values for a
   * specified genomic position. The pileup is represented as a pair of strings,
   * with the first string being the sequence pileup and the second being the
   * corresponding quality values.
   *
   * @param pos The genomic position for which the pileup is requested.
   * @return A pair of strings representing the sequence and quality value
   * pileup.
   */
  [[nodiscard]] std::pair<std::string, std::string> GetPileup(
      uint64_t pos) const;

  /**
   * @brief Adds a new record to the pileup.
   *
   * The given record is added to the internal storage and its quality values
   * and sequences are pre-processed for efficient retrieval during pileup
   * generation.
   *
   * @param r The record to be added to the pileup.
   */
  void AddRecord(EncodingRecord& r);

  /**
   * @brief Gets the minimum genomic position of the records in the pileup.
   *
   * @return The minimum position of all records in the pileup.
   */
  [[nodiscard]] uint64_t GetMinPos() const;

  /**
   * @brief Gets the maximum genomic position of the records in the pileup.
   *
   * @return The maximum position of all records in the pileup.
   */
  [[nodiscard]] uint64_t GetMaxPos() const;

  /**
   * @brief Checks if the pileup is empty.
   *
   * @return `true` if the pileup contains no records, `false` otherwise.
   */
  [[nodiscard]] bool empty() const;

  /**
   * @brief Checks if a given record ends before the specified position.
   *
   * This static method checks if the records defined by their positions and
   * sequences terminate before a specified genomic position. This is used to
   * filter out records that are not relevant for further pileup processing.
   *
   * @param positions A vector of genomic positions for the records.
   * @param preprocessed_seqs A vector of sequences corresponding to the
   * positions.
   * @param pos The position to compare against.
   * @return `true` if all records end before the given position, `false`
   * otherwise.
   */
  static bool IsRecordBeforePos(
      const std::vector<uint64_t>& positions,
      const std::vector<std::string>& preprocessed_seqs, uint64_t pos);

  /**
   * @brief Gets all records that end before the specified position.
   *
   * This method returns a list of all records that terminate before the given
   * genomic position. The records are removed from the internal storage and
   * returned for further processing or cleanup.
   *
   * @param pos The genomic position to compare against.
   * @return A vector of records that end before the specified position.
   */
  std::vector<EncodingRecord> GetRecordsBefore(uint64_t pos);

  /**
   * @brief Retrieves all records currently in the pileup.
   *
   * This method returns a copy of all records stored in the pileup for
   * inspection or processing. It does not modify the internal storage.
   *
   * @return A vector containing all records in the pileup.
   */
  std::vector<EncodingRecord> GetAllRecords();

 private:
  /**
   * @brief Removes the next record from the pileup.
   *
   * This helper method removes the next record from the pileup and updates the
   * minimum and maximum positions accordingly.
   */
  void NextRecord();

  /**
   * @brief Pre-processes a given sequence based on its CIGAR string.
   *
   * This method uses the CIGAR string to generate an expanded version of the
   * sequence, accounting for all insertions, deletions, and skipped bases. It
   * is used to ensure that sequences are correctly aligned during pileup
   * generation.
   *
   * @param read The raw sequence read from the record.
   * @param cigar The CIGAR string describing the alignment of the sequence.
   * @return The pre-processed and expanded sequence based on the CIGAR string.
   */
  static std::string preprocess(const std::string& read,
                                const std::string& cigar);
};

// -----------------------------------------------------------------------------

}  // namespace genie::quality::calq

// -----------------------------------------------------------------------------

#endif  // SRC_GENIE_QUALITY_CALQ_RECORD_PILEUP_H_

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
